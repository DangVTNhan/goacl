// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: relationship.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PreconditionType specifies the type of precondition
type PreconditionType int32

const (
	PreconditionType_PRECONDITION_TYPE_UNSPECIFIED    PreconditionType = 0
	PreconditionType_PRECONDITION_TYPE_MUST_EXIST     PreconditionType = 1
	PreconditionType_PRECONDITION_TYPE_MUST_NOT_EXIST PreconditionType = 2
)

// Enum value maps for PreconditionType.
var (
	PreconditionType_name = map[int32]string{
		0: "PRECONDITION_TYPE_UNSPECIFIED",
		1: "PRECONDITION_TYPE_MUST_EXIST",
		2: "PRECONDITION_TYPE_MUST_NOT_EXIST",
	}
	PreconditionType_value = map[string]int32{
		"PRECONDITION_TYPE_UNSPECIFIED":    0,
		"PRECONDITION_TYPE_MUST_EXIST":     1,
		"PRECONDITION_TYPE_MUST_NOT_EXIST": 2,
	}
)

func (x PreconditionType) Enum() *PreconditionType {
	p := new(PreconditionType)
	*p = x
	return p
}

func (x PreconditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PreconditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_relationship_proto_enumTypes[0].Descriptor()
}

func (PreconditionType) Type() protoreflect.EnumType {
	return &file_relationship_proto_enumTypes[0]
}

func (x PreconditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PreconditionType.Descriptor instead.
func (PreconditionType) EnumDescriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{0}
}

// ChangeType specifies the type of change in a watch response
type ChangeType int32

const (
	ChangeType_CHANGE_TYPE_UNSPECIFIED ChangeType = 0
	ChangeType_CHANGE_TYPE_CREATED     ChangeType = 1
	ChangeType_CHANGE_TYPE_DELETED     ChangeType = 2
	ChangeType_CHANGE_TYPE_UPDATED     ChangeType = 3
)

// Enum value maps for ChangeType.
var (
	ChangeType_name = map[int32]string{
		0: "CHANGE_TYPE_UNSPECIFIED",
		1: "CHANGE_TYPE_CREATED",
		2: "CHANGE_TYPE_DELETED",
		3: "CHANGE_TYPE_UPDATED",
	}
	ChangeType_value = map[string]int32{
		"CHANGE_TYPE_UNSPECIFIED": 0,
		"CHANGE_TYPE_CREATED":     1,
		"CHANGE_TYPE_DELETED":     2,
		"CHANGE_TYPE_UPDATED":     3,
	}
)

func (x ChangeType) Enum() *ChangeType {
	p := new(ChangeType)
	*p = x
	return p
}

func (x ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_relationship_proto_enumTypes[1].Descriptor()
}

func (ChangeType) Type() protoreflect.EnumType {
	return &file_relationship_proto_enumTypes[1]
}

func (x ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeType.Descriptor instead.
func (ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{1}
}

// WriteRelationRequest contains tuples to write
type WriteRelationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The relation tuples to write
	Tuples []*RelationTuple `protobuf:"bytes,1,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Optional consistency token for causally consistent writes
	ConsistencyToken string `protobuf:"bytes,2,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	// Optional preconditions that must be met
	Preconditions []*Precondition `protobuf:"bytes,3,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRelationRequest) Reset() {
	*x = WriteRelationRequest{}
	mi := &file_relationship_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRelationRequest) ProtoMessage() {}

func (x *WriteRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRelationRequest.ProtoReflect.Descriptor instead.
func (*WriteRelationRequest) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{0}
}

func (x *WriteRelationRequest) GetTuples() []*RelationTuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *WriteRelationRequest) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

func (x *WriteRelationRequest) GetPreconditions() []*Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

// WriteRelationResponse confirms the write operation
type WriteRelationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consistency token for subsequent operations
	ConsistencyToken string `protobuf:"bytes,1,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	// When the tuples were written
	WrittenAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=written_at,json=writtenAt,proto3" json:"written_at,omitempty"`
	// Number of tuples actually written
	TuplesWritten int32 `protobuf:"varint,3,opt,name=tuples_written,json=tuplesWritten,proto3" json:"tuples_written,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRelationResponse) Reset() {
	*x = WriteRelationResponse{}
	mi := &file_relationship_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRelationResponse) ProtoMessage() {}

func (x *WriteRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRelationResponse.ProtoReflect.Descriptor instead.
func (*WriteRelationResponse) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{1}
}

func (x *WriteRelationResponse) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

func (x *WriteRelationResponse) GetWrittenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.WrittenAt
	}
	return nil
}

func (x *WriteRelationResponse) GetTuplesWritten() int32 {
	if x != nil {
		return x.TuplesWritten
	}
	return 0
}

// DeleteRelationRequest specifies tuples to delete
type DeleteRelationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter for tuples to delete
	Filter *RelationFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional consistency token
	ConsistencyToken string `protobuf:"bytes,2,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	// Optional preconditions that must be met
	Preconditions []*Precondition `protobuf:"bytes,3,rep,name=preconditions,proto3" json:"preconditions,omitempty"`
	// If true, delete all matching tuples; if false, fail if multiple matches
	AllowMultiple bool `protobuf:"varint,4,opt,name=allow_multiple,json=allowMultiple,proto3" json:"allow_multiple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRelationRequest) Reset() {
	*x = DeleteRelationRequest{}
	mi := &file_relationship_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRelationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelationRequest) ProtoMessage() {}

func (x *DeleteRelationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelationRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelationRequest) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteRelationRequest) GetFilter() *RelationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *DeleteRelationRequest) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

func (x *DeleteRelationRequest) GetPreconditions() []*Precondition {
	if x != nil {
		return x.Preconditions
	}
	return nil
}

func (x *DeleteRelationRequest) GetAllowMultiple() bool {
	if x != nil {
		return x.AllowMultiple
	}
	return false
}

// DeleteRelationResponse confirms the delete operation
type DeleteRelationResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consistency token for subsequent operations
	ConsistencyToken string `protobuf:"bytes,1,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	// When the tuples were deleted
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	// Number of tuples actually deleted
	TuplesDeleted int32 `protobuf:"varint,3,opt,name=tuples_deleted,json=tuplesDeleted,proto3" json:"tuples_deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRelationResponse) Reset() {
	*x = DeleteRelationResponse{}
	mi := &file_relationship_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRelationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelationResponse) ProtoMessage() {}

func (x *DeleteRelationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelationResponse.ProtoReflect.Descriptor instead.
func (*DeleteRelationResponse) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRelationResponse) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

func (x *DeleteRelationResponse) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *DeleteRelationResponse) GetTuplesDeleted() int32 {
	if x != nil {
		return x.TuplesDeleted
	}
	return 0
}

// ReadRelationsRequest specifies what tuples to read
type ReadRelationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter for tuples to read
	Filter *RelationFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional consistency token
	ConsistencyToken string `protobuf:"bytes,2,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	// Pagination token
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Maximum number of tuples to return
	PageSize      int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRelationsRequest) Reset() {
	*x = ReadRelationsRequest{}
	mi := &file_relationship_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRelationsRequest) ProtoMessage() {}

func (x *ReadRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRelationsRequest.ProtoReflect.Descriptor instead.
func (*ReadRelationsRequest) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{4}
}

func (x *ReadRelationsRequest) GetFilter() *RelationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ReadRelationsRequest) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

func (x *ReadRelationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ReadRelationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// ReadRelationsResponse contains the matching tuples
type ReadRelationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The matching relation tuples
	Tuples []*RelationTuple `protobuf:"bytes,1,rep,name=tuples,proto3" json:"tuples,omitempty"`
	// Token for next page of results
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Consistency token
	ConsistencyToken string `protobuf:"bytes,3,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReadRelationsResponse) Reset() {
	*x = ReadRelationsResponse{}
	mi := &file_relationship_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRelationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRelationsResponse) ProtoMessage() {}

func (x *ReadRelationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRelationsResponse.ProtoReflect.Descriptor instead.
func (*ReadRelationsResponse) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{5}
}

func (x *ReadRelationsResponse) GetTuples() []*RelationTuple {
	if x != nil {
		return x.Tuples
	}
	return nil
}

func (x *ReadRelationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ReadRelationsResponse) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

// WatchRelationsRequest specifies what changes to watch
type WatchRelationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Filter for tuples to watch
	Filter *RelationFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional consistency token to start watching from
	ConsistencyToken string `protobuf:"bytes,2,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WatchRelationsRequest) Reset() {
	*x = WatchRelationsRequest{}
	mi := &file_relationship_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRelationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRelationsRequest) ProtoMessage() {}

func (x *WatchRelationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRelationsRequest.ProtoReflect.Descriptor instead.
func (*WatchRelationsRequest) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{6}
}

func (x *WatchRelationsRequest) GetFilter() *RelationFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *WatchRelationsRequest) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

// WatchRelationsResponse contains change notifications
type WatchRelationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of change that occurred
	ChangeType ChangeType `protobuf:"varint,1,opt,name=change_type,json=changeType,proto3,enum=goacl.v1.ChangeType" json:"change_type,omitempty"`
	// The tuple that was changed
	Tuple *RelationTuple `protobuf:"bytes,2,opt,name=tuple,proto3" json:"tuple,omitempty"`
	// Consistency token for this change
	ConsistencyToken string `protobuf:"bytes,3,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	// When the change occurred
	ChangedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=changed_at,json=changedAt,proto3" json:"changed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchRelationsResponse) Reset() {
	*x = WatchRelationsResponse{}
	mi := &file_relationship_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchRelationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRelationsResponse) ProtoMessage() {}

func (x *WatchRelationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRelationsResponse.ProtoReflect.Descriptor instead.
func (*WatchRelationsResponse) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{7}
}

func (x *WatchRelationsResponse) GetChangeType() ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return ChangeType_CHANGE_TYPE_UNSPECIFIED
}

func (x *WatchRelationsResponse) GetTuple() *RelationTuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

func (x *WatchRelationsResponse) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

func (x *WatchRelationsResponse) GetChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedAt
	}
	return nil
}

// BatchWriteRequest contains multiple write operations
type BatchWriteRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of write operations to perform atomically
	Operations []*WriteOperation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// Optional consistency token
	ConsistencyToken string `protobuf:"bytes,2,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BatchWriteRequest) Reset() {
	*x = BatchWriteRequest{}
	mi := &file_relationship_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchWriteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWriteRequest) ProtoMessage() {}

func (x *BatchWriteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWriteRequest.ProtoReflect.Descriptor instead.
func (*BatchWriteRequest) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{8}
}

func (x *BatchWriteRequest) GetOperations() []*WriteOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *BatchWriteRequest) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

// BatchWriteResponse confirms the batch operation
type BatchWriteResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Consistency token for subsequent operations
	ConsistencyToken string `protobuf:"bytes,1,opt,name=consistency_token,json=consistencyToken,proto3" json:"consistency_token,omitempty"`
	// When the batch was written
	WrittenAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=written_at,json=writtenAt,proto3" json:"written_at,omitempty"`
	// Results for each operation
	Results       []*WriteOperationResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchWriteResponse) Reset() {
	*x = BatchWriteResponse{}
	mi := &file_relationship_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchWriteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchWriteResponse) ProtoMessage() {}

func (x *BatchWriteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchWriteResponse.ProtoReflect.Descriptor instead.
func (*BatchWriteResponse) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{9}
}

func (x *BatchWriteResponse) GetConsistencyToken() string {
	if x != nil {
		return x.ConsistencyToken
	}
	return ""
}

func (x *BatchWriteResponse) GetWrittenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.WrittenAt
	}
	return nil
}

func (x *BatchWriteResponse) GetResults() []*WriteOperationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// WriteOperation represents a single write or delete operation
type WriteOperation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Operation:
	//
	//	*WriteOperation_Write
	//	*WriteOperation_Delete
	Operation     isWriteOperation_Operation `protobuf_oneof:"operation"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteOperation) Reset() {
	*x = WriteOperation{}
	mi := &file_relationship_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOperation) ProtoMessage() {}

func (x *WriteOperation) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOperation.ProtoReflect.Descriptor instead.
func (*WriteOperation) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{10}
}

func (x *WriteOperation) GetOperation() isWriteOperation_Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *WriteOperation) GetWrite() *WriteRelationRequest {
	if x != nil {
		if x, ok := x.Operation.(*WriteOperation_Write); ok {
			return x.Write
		}
	}
	return nil
}

func (x *WriteOperation) GetDelete() *DeleteRelationRequest {
	if x != nil {
		if x, ok := x.Operation.(*WriteOperation_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

type isWriteOperation_Operation interface {
	isWriteOperation_Operation()
}

type WriteOperation_Write struct {
	// Write operation
	Write *WriteRelationRequest `protobuf:"bytes,1,opt,name=write,proto3,oneof"`
}

type WriteOperation_Delete struct {
	// Delete operation
	Delete *DeleteRelationRequest `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

func (*WriteOperation_Write) isWriteOperation_Operation() {}

func (*WriteOperation_Delete) isWriteOperation_Operation() {}

// WriteOperationResult contains the result of a single operation
type WriteOperationResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the operation succeeded
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if the operation failed
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Number of tuples affected
	TuplesAffected int32 `protobuf:"varint,3,opt,name=tuples_affected,json=tuplesAffected,proto3" json:"tuples_affected,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WriteOperationResult) Reset() {
	*x = WriteOperationResult{}
	mi := &file_relationship_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteOperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteOperationResult) ProtoMessage() {}

func (x *WriteOperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteOperationResult.ProtoReflect.Descriptor instead.
func (*WriteOperationResult) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{11}
}

func (x *WriteOperationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *WriteOperationResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *WriteOperationResult) GetTuplesAffected() int32 {
	if x != nil {
		return x.TuplesAffected
	}
	return 0
}

// RelationFilter specifies criteria for filtering relation tuples
type RelationFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional namespace filter
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Optional object ID filter
	ObjectId string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// Optional relation filter
	Relation string `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	// Optional user ID filter
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Optional userset filter
	Userset       string `protobuf:"bytes,5,opt,name=userset,proto3" json:"userset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RelationFilter) Reset() {
	*x = RelationFilter{}
	mi := &file_relationship_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationFilter) ProtoMessage() {}

func (x *RelationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationFilter.ProtoReflect.Descriptor instead.
func (*RelationFilter) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{12}
}

func (x *RelationFilter) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RelationFilter) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *RelationFilter) GetRelation() string {
	if x != nil {
		return x.Relation
	}
	return ""
}

func (x *RelationFilter) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RelationFilter) GetUserset() string {
	if x != nil {
		return x.Userset
	}
	return ""
}

// Precondition specifies a condition that must be met for an operation
type Precondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of precondition
	Type PreconditionType `protobuf:"varint,1,opt,name=type,proto3,enum=goacl.v1.PreconditionType" json:"type,omitempty"`
	// The tuple that must (not) exist
	Tuple         *RelationTuple `protobuf:"bytes,2,opt,name=tuple,proto3" json:"tuple,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Precondition) Reset() {
	*x = Precondition{}
	mi := &file_relationship_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Precondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Precondition) ProtoMessage() {}

func (x *Precondition) ProtoReflect() protoreflect.Message {
	mi := &file_relationship_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Precondition.ProtoReflect.Descriptor instead.
func (*Precondition) Descriptor() ([]byte, []int) {
	return file_relationship_proto_rawDescGZIP(), []int{13}
}

func (x *Precondition) GetType() PreconditionType {
	if x != nil {
		return x.Type
	}
	return PreconditionType_PRECONDITION_TYPE_UNSPECIFIED
}

func (x *Precondition) GetTuple() *RelationTuple {
	if x != nil {
		return x.Tuple
	}
	return nil
}

var File_relationship_proto protoreflect.FileDescriptor

const file_relationship_proto_rawDesc = "" +
	"\n" +
	"\x12relationship.proto\x12\bgoacl.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\vtypes.proto\"\xb2\x01\n" +
	"\x14WriteRelationRequest\x12/\n" +
	"\x06tuples\x18\x01 \x03(\v2\x17.goacl.v1.RelationTupleR\x06tuples\x12+\n" +
	"\x11consistency_token\x18\x02 \x01(\tR\x10consistencyToken\x12<\n" +
	"\rpreconditions\x18\x03 \x03(\v2\x16.goacl.v1.PreconditionR\rpreconditions\"\xa6\x01\n" +
	"\x15WriteRelationResponse\x12+\n" +
	"\x11consistency_token\x18\x01 \x01(\tR\x10consistencyToken\x129\n" +
	"\n" +
	"written_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\twrittenAt\x12%\n" +
	"\x0etuples_written\x18\x03 \x01(\x05R\rtuplesWritten\"\xdb\x01\n" +
	"\x15DeleteRelationRequest\x120\n" +
	"\x06filter\x18\x01 \x01(\v2\x18.goacl.v1.RelationFilterR\x06filter\x12+\n" +
	"\x11consistency_token\x18\x02 \x01(\tR\x10consistencyToken\x12<\n" +
	"\rpreconditions\x18\x03 \x03(\v2\x16.goacl.v1.PreconditionR\rpreconditions\x12%\n" +
	"\x0eallow_multiple\x18\x04 \x01(\bR\rallowMultiple\"\xa7\x01\n" +
	"\x16DeleteRelationResponse\x12+\n" +
	"\x11consistency_token\x18\x01 \x01(\tR\x10consistencyToken\x129\n" +
	"\n" +
	"deleted_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tdeletedAt\x12%\n" +
	"\x0etuples_deleted\x18\x03 \x01(\x05R\rtuplesDeleted\"\xb1\x01\n" +
	"\x14ReadRelationsRequest\x120\n" +
	"\x06filter\x18\x01 \x01(\v2\x18.goacl.v1.RelationFilterR\x06filter\x12+\n" +
	"\x11consistency_token\x18\x02 \x01(\tR\x10consistencyToken\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\x9d\x01\n" +
	"\x15ReadRelationsResponse\x12/\n" +
	"\x06tuples\x18\x01 \x03(\v2\x17.goacl.v1.RelationTupleR\x06tuples\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12+\n" +
	"\x11consistency_token\x18\x03 \x01(\tR\x10consistencyToken\"v\n" +
	"\x15WatchRelationsRequest\x120\n" +
	"\x06filter\x18\x01 \x01(\v2\x18.goacl.v1.RelationFilterR\x06filter\x12+\n" +
	"\x11consistency_token\x18\x02 \x01(\tR\x10consistencyToken\"\xe6\x01\n" +
	"\x16WatchRelationsResponse\x125\n" +
	"\vchange_type\x18\x01 \x01(\x0e2\x14.goacl.v1.ChangeTypeR\n" +
	"changeType\x12-\n" +
	"\x05tuple\x18\x02 \x01(\v2\x17.goacl.v1.RelationTupleR\x05tuple\x12+\n" +
	"\x11consistency_token\x18\x03 \x01(\tR\x10consistencyToken\x129\n" +
	"\n" +
	"changed_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tchangedAt\"z\n" +
	"\x11BatchWriteRequest\x128\n" +
	"\n" +
	"operations\x18\x01 \x03(\v2\x18.goacl.v1.WriteOperationR\n" +
	"operations\x12+\n" +
	"\x11consistency_token\x18\x02 \x01(\tR\x10consistencyToken\"\xb6\x01\n" +
	"\x12BatchWriteResponse\x12+\n" +
	"\x11consistency_token\x18\x01 \x01(\tR\x10consistencyToken\x129\n" +
	"\n" +
	"written_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\twrittenAt\x128\n" +
	"\aresults\x18\x03 \x03(\v2\x1e.goacl.v1.WriteOperationResultR\aresults\"\x90\x01\n" +
	"\x0eWriteOperation\x126\n" +
	"\x05write\x18\x01 \x01(\v2\x1e.goacl.v1.WriteRelationRequestH\x00R\x05write\x129\n" +
	"\x06delete\x18\x02 \x01(\v2\x1f.goacl.v1.DeleteRelationRequestH\x00R\x06deleteB\v\n" +
	"\toperation\"o\n" +
	"\x14WriteOperationResult\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12'\n" +
	"\x0ftuples_affected\x18\x03 \x01(\x05R\x0etuplesAffected\"\x9a\x01\n" +
	"\x0eRelationFilter\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x1b\n" +
	"\tobject_id\x18\x02 \x01(\tR\bobjectId\x12\x1a\n" +
	"\brelation\x18\x03 \x01(\tR\brelation\x12\x17\n" +
	"\auser_id\x18\x04 \x01(\tR\x06userId\x12\x18\n" +
	"\auserset\x18\x05 \x01(\tR\auserset\"m\n" +
	"\fPrecondition\x12.\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1a.goacl.v1.PreconditionTypeR\x04type\x12-\n" +
	"\x05tuple\x18\x02 \x01(\v2\x17.goacl.v1.RelationTupleR\x05tuple*}\n" +
	"\x10PreconditionType\x12!\n" +
	"\x1dPRECONDITION_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cPRECONDITION_TYPE_MUST_EXIST\x10\x01\x12$\n" +
	" PRECONDITION_TYPE_MUST_NOT_EXIST\x10\x02*t\n" +
	"\n" +
	"ChangeType\x12\x1b\n" +
	"\x17CHANGE_TYPE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13CHANGE_TYPE_CREATED\x10\x01\x12\x17\n" +
	"\x13CHANGE_TYPE_DELETED\x10\x02\x12\x17\n" +
	"\x13CHANGE_TYPE_UPDATED\x10\x032\xa0\x04\n" +
	"\x13RelationshipService\x12j\n" +
	"\rWriteRelation\x12\x1e.goacl.v1.WriteRelationRequest\x1a\x1f.goacl.v1.WriteRelationResponse\"\x18\x82\xd3\xe4\x93\x02\x12:\x01*\"\r/v1/relations\x12t\n" +
	"\x0eDeleteRelation\x12\x1f.goacl.v1.DeleteRelationRequest\x1a .goacl.v1.DeleteRelationResponse\"\x1f\x82\xd3\xe4\x93\x02\x19:\x01*\"\x14/v1/relations/delete\x12g\n" +
	"\rReadRelations\x12\x1e.goacl.v1.ReadRelationsRequest\x1a\x1f.goacl.v1.ReadRelationsResponse\"\x15\x82\xd3\xe4\x93\x02\x0f\x12\r/v1/relations\x12U\n" +
	"\x0eWatchRelations\x12\x1f.goacl.v1.WatchRelationsRequest\x1a .goacl.v1.WatchRelationsResponse0\x01\x12g\n" +
	"\n" +
	"BatchWrite\x12\x1b.goacl.v1.BatchWriteRequest\x1a\x1c.goacl.v1.BatchWriteResponse\"\x1e\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/v1/relations/batchB\x83\x01\n" +
	"\fcom.goacl.v1B\x11RelationshipProtoP\x01Z\x1fgithub.com/DangVTNhan/goacl/api\xa2\x02\x03GXX\xaa\x02\bGoacl.V1\xca\x02\bGoacl\\V1\xe2\x02\x14Goacl\\V1\\GPBMetadata\xea\x02\tGoacl::V1b\x06proto3"

var (
	file_relationship_proto_rawDescOnce sync.Once
	file_relationship_proto_rawDescData []byte
)

func file_relationship_proto_rawDescGZIP() []byte {
	file_relationship_proto_rawDescOnce.Do(func() {
		file_relationship_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_relationship_proto_rawDesc), len(file_relationship_proto_rawDesc)))
	})
	return file_relationship_proto_rawDescData
}

var file_relationship_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_relationship_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_relationship_proto_goTypes = []any{
	(PreconditionType)(0),          // 0: goacl.v1.PreconditionType
	(ChangeType)(0),                // 1: goacl.v1.ChangeType
	(*WriteRelationRequest)(nil),   // 2: goacl.v1.WriteRelationRequest
	(*WriteRelationResponse)(nil),  // 3: goacl.v1.WriteRelationResponse
	(*DeleteRelationRequest)(nil),  // 4: goacl.v1.DeleteRelationRequest
	(*DeleteRelationResponse)(nil), // 5: goacl.v1.DeleteRelationResponse
	(*ReadRelationsRequest)(nil),   // 6: goacl.v1.ReadRelationsRequest
	(*ReadRelationsResponse)(nil),  // 7: goacl.v1.ReadRelationsResponse
	(*WatchRelationsRequest)(nil),  // 8: goacl.v1.WatchRelationsRequest
	(*WatchRelationsResponse)(nil), // 9: goacl.v1.WatchRelationsResponse
	(*BatchWriteRequest)(nil),      // 10: goacl.v1.BatchWriteRequest
	(*BatchWriteResponse)(nil),     // 11: goacl.v1.BatchWriteResponse
	(*WriteOperation)(nil),         // 12: goacl.v1.WriteOperation
	(*WriteOperationResult)(nil),   // 13: goacl.v1.WriteOperationResult
	(*RelationFilter)(nil),         // 14: goacl.v1.RelationFilter
	(*Precondition)(nil),           // 15: goacl.v1.Precondition
	(*RelationTuple)(nil),          // 16: goacl.v1.RelationTuple
	(*timestamppb.Timestamp)(nil),  // 17: google.protobuf.Timestamp
}
var file_relationship_proto_depIdxs = []int32{
	16, // 0: goacl.v1.WriteRelationRequest.tuples:type_name -> goacl.v1.RelationTuple
	15, // 1: goacl.v1.WriteRelationRequest.preconditions:type_name -> goacl.v1.Precondition
	17, // 2: goacl.v1.WriteRelationResponse.written_at:type_name -> google.protobuf.Timestamp
	14, // 3: goacl.v1.DeleteRelationRequest.filter:type_name -> goacl.v1.RelationFilter
	15, // 4: goacl.v1.DeleteRelationRequest.preconditions:type_name -> goacl.v1.Precondition
	17, // 5: goacl.v1.DeleteRelationResponse.deleted_at:type_name -> google.protobuf.Timestamp
	14, // 6: goacl.v1.ReadRelationsRequest.filter:type_name -> goacl.v1.RelationFilter
	16, // 7: goacl.v1.ReadRelationsResponse.tuples:type_name -> goacl.v1.RelationTuple
	14, // 8: goacl.v1.WatchRelationsRequest.filter:type_name -> goacl.v1.RelationFilter
	1,  // 9: goacl.v1.WatchRelationsResponse.change_type:type_name -> goacl.v1.ChangeType
	16, // 10: goacl.v1.WatchRelationsResponse.tuple:type_name -> goacl.v1.RelationTuple
	17, // 11: goacl.v1.WatchRelationsResponse.changed_at:type_name -> google.protobuf.Timestamp
	12, // 12: goacl.v1.BatchWriteRequest.operations:type_name -> goacl.v1.WriteOperation
	17, // 13: goacl.v1.BatchWriteResponse.written_at:type_name -> google.protobuf.Timestamp
	13, // 14: goacl.v1.BatchWriteResponse.results:type_name -> goacl.v1.WriteOperationResult
	2,  // 15: goacl.v1.WriteOperation.write:type_name -> goacl.v1.WriteRelationRequest
	4,  // 16: goacl.v1.WriteOperation.delete:type_name -> goacl.v1.DeleteRelationRequest
	0,  // 17: goacl.v1.Precondition.type:type_name -> goacl.v1.PreconditionType
	16, // 18: goacl.v1.Precondition.tuple:type_name -> goacl.v1.RelationTuple
	2,  // 19: goacl.v1.RelationshipService.WriteRelation:input_type -> goacl.v1.WriteRelationRequest
	4,  // 20: goacl.v1.RelationshipService.DeleteRelation:input_type -> goacl.v1.DeleteRelationRequest
	6,  // 21: goacl.v1.RelationshipService.ReadRelations:input_type -> goacl.v1.ReadRelationsRequest
	8,  // 22: goacl.v1.RelationshipService.WatchRelations:input_type -> goacl.v1.WatchRelationsRequest
	10, // 23: goacl.v1.RelationshipService.BatchWrite:input_type -> goacl.v1.BatchWriteRequest
	3,  // 24: goacl.v1.RelationshipService.WriteRelation:output_type -> goacl.v1.WriteRelationResponse
	5,  // 25: goacl.v1.RelationshipService.DeleteRelation:output_type -> goacl.v1.DeleteRelationResponse
	7,  // 26: goacl.v1.RelationshipService.ReadRelations:output_type -> goacl.v1.ReadRelationsResponse
	9,  // 27: goacl.v1.RelationshipService.WatchRelations:output_type -> goacl.v1.WatchRelationsResponse
	11, // 28: goacl.v1.RelationshipService.BatchWrite:output_type -> goacl.v1.BatchWriteResponse
	24, // [24:29] is the sub-list for method output_type
	19, // [19:24] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_relationship_proto_init() }
func file_relationship_proto_init() {
	if File_relationship_proto != nil {
		return
	}
	file_types_proto_init()
	file_relationship_proto_msgTypes[10].OneofWrappers = []any{
		(*WriteOperation_Write)(nil),
		(*WriteOperation_Delete)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_relationship_proto_rawDesc), len(file_relationship_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_relationship_proto_goTypes,
		DependencyIndexes: file_relationship_proto_depIdxs,
		EnumInfos:         file_relationship_proto_enumTypes,
		MessageInfos:      file_relationship_proto_msgTypes,
	}.Build()
	File_relationship_proto = out.File
	file_relationship_proto_goTypes = nil
	file_relationship_proto_depIdxs = nil
}
