// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: relationship.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationshipService_WriteRelation_FullMethodName  = "/goacl.v1.RelationshipService/WriteRelation"
	RelationshipService_DeleteRelation_FullMethodName = "/goacl.v1.RelationshipService/DeleteRelation"
	RelationshipService_ReadRelations_FullMethodName  = "/goacl.v1.RelationshipService/ReadRelations"
	RelationshipService_WatchRelations_FullMethodName = "/goacl.v1.RelationshipService/WatchRelations"
	RelationshipService_BatchWrite_FullMethodName     = "/goacl.v1.RelationshipService/BatchWrite"
)

// RelationshipServiceClient is the client API for RelationshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RelationshipService manages relation tuples
type RelationshipServiceClient interface {
	// Write one or more relation tuples
	WriteRelation(ctx context.Context, in *WriteRelationRequest, opts ...grpc.CallOption) (*WriteRelationResponse, error)
	// Delete one or more relation tuples
	DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error)
	// Read relation tuples based on filters
	ReadRelations(ctx context.Context, in *ReadRelationsRequest, opts ...grpc.CallOption) (*ReadRelationsResponse, error)
	// Watch for changes to relation tuples (streaming)
	WatchRelations(ctx context.Context, in *WatchRelationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchRelationsResponse], error)
	// Batch write multiple relation operations atomically
	BatchWrite(ctx context.Context, in *BatchWriteRequest, opts ...grpc.CallOption) (*BatchWriteResponse, error)
}

type relationshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationshipServiceClient(cc grpc.ClientConnInterface) RelationshipServiceClient {
	return &relationshipServiceClient{cc}
}

func (c *relationshipServiceClient) WriteRelation(ctx context.Context, in *WriteRelationRequest, opts ...grpc.CallOption) (*WriteRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteRelationResponse)
	err := c.cc.Invoke(ctx, RelationshipService_WriteRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceClient) DeleteRelation(ctx context.Context, in *DeleteRelationRequest, opts ...grpc.CallOption) (*DeleteRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRelationResponse)
	err := c.cc.Invoke(ctx, RelationshipService_DeleteRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceClient) ReadRelations(ctx context.Context, in *ReadRelationsRequest, opts ...grpc.CallOption) (*ReadRelationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadRelationsResponse)
	err := c.cc.Invoke(ctx, RelationshipService_ReadRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationshipServiceClient) WatchRelations(ctx context.Context, in *WatchRelationsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchRelationsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RelationshipService_ServiceDesc.Streams[0], RelationshipService_WatchRelations_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRelationsRequest, WatchRelationsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RelationshipService_WatchRelationsClient = grpc.ServerStreamingClient[WatchRelationsResponse]

func (c *relationshipServiceClient) BatchWrite(ctx context.Context, in *BatchWriteRequest, opts ...grpc.CallOption) (*BatchWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchWriteResponse)
	err := c.cc.Invoke(ctx, RelationshipService_BatchWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationshipServiceServer is the server API for RelationshipService service.
// All implementations must embed UnimplementedRelationshipServiceServer
// for forward compatibility.
//
// RelationshipService manages relation tuples
type RelationshipServiceServer interface {
	// Write one or more relation tuples
	WriteRelation(context.Context, *WriteRelationRequest) (*WriteRelationResponse, error)
	// Delete one or more relation tuples
	DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error)
	// Read relation tuples based on filters
	ReadRelations(context.Context, *ReadRelationsRequest) (*ReadRelationsResponse, error)
	// Watch for changes to relation tuples (streaming)
	WatchRelations(*WatchRelationsRequest, grpc.ServerStreamingServer[WatchRelationsResponse]) error
	// Batch write multiple relation operations atomically
	BatchWrite(context.Context, *BatchWriteRequest) (*BatchWriteResponse, error)
	mustEmbedUnimplementedRelationshipServiceServer()
}

// UnimplementedRelationshipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationshipServiceServer struct{}

func (UnimplementedRelationshipServiceServer) WriteRelation(context.Context, *WriteRelationRequest) (*WriteRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRelation not implemented")
}
func (UnimplementedRelationshipServiceServer) DeleteRelation(context.Context, *DeleteRelationRequest) (*DeleteRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelation not implemented")
}
func (UnimplementedRelationshipServiceServer) ReadRelations(context.Context, *ReadRelationsRequest) (*ReadRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRelations not implemented")
}
func (UnimplementedRelationshipServiceServer) WatchRelations(*WatchRelationsRequest, grpc.ServerStreamingServer[WatchRelationsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchRelations not implemented")
}
func (UnimplementedRelationshipServiceServer) BatchWrite(context.Context, *BatchWriteRequest) (*BatchWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWrite not implemented")
}
func (UnimplementedRelationshipServiceServer) mustEmbedUnimplementedRelationshipServiceServer() {}
func (UnimplementedRelationshipServiceServer) testEmbeddedByValue()                             {}

// UnsafeRelationshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationshipServiceServer will
// result in compilation errors.
type UnsafeRelationshipServiceServer interface {
	mustEmbedUnimplementedRelationshipServiceServer()
}

func RegisterRelationshipServiceServer(s grpc.ServiceRegistrar, srv RelationshipServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationshipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationshipService_ServiceDesc, srv)
}

func _RelationshipService_WriteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).WriteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipService_WriteRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).WriteRelation(ctx, req.(*WriteRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipService_DeleteRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).DeleteRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipService_DeleteRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).DeleteRelation(ctx, req.(*DeleteRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipService_ReadRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).ReadRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipService_ReadRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).ReadRelations(ctx, req.(*ReadRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationshipService_WatchRelations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRelationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelationshipServiceServer).WatchRelations(m, &grpc.GenericServerStream[WatchRelationsRequest, WatchRelationsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RelationshipService_WatchRelationsServer = grpc.ServerStreamingServer[WatchRelationsResponse]

func _RelationshipService_BatchWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationshipServiceServer).BatchWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationshipService_BatchWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationshipServiceServer).BatchWrite(ctx, req.(*BatchWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationshipService_ServiceDesc is the grpc.ServiceDesc for RelationshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goacl.v1.RelationshipService",
	HandlerType: (*RelationshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteRelation",
			Handler:    _RelationshipService_WriteRelation_Handler,
		},
		{
			MethodName: "DeleteRelation",
			Handler:    _RelationshipService_DeleteRelation_Handler,
		},
		{
			MethodName: "ReadRelations",
			Handler:    _RelationshipService_ReadRelations_Handler,
		},
		{
			MethodName: "BatchWrite",
			Handler:    _RelationshipService_BatchWrite_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchRelations",
			Handler:       _RelationshipService_WatchRelations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "relationship.proto",
}
