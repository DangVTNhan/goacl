syntax = "proto3";

package goacl.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "types.proto";

option go_package = "github.com/DangVTNhan/goacl/api";

// AuthorizationService provides authorization checking capabilities
service AuthorizationService {
  // Check if a user has a specific permission on an object
  rpc Check(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      post: "/v1/check"
      body: "*"
    };
  }

  // Expand a userset to show all users that have a specific relation
  // Useful for debugging and understanding permission inheritance
  rpc Expand(ExpandRequest) returns (ExpandResponse) {
    option (google.api.http) = {
      post: "/v1/expand"
      body: "*"
    };
  }

  // List all permissions a user has across different resources
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}/permissions"
    };
  }

  // Batch check multiple permissions at once for efficiency
  rpc BatchCheck(BatchCheckRequest) returns (BatchCheckResponse) {
    option (google.api.http) = {
      post: "/v1/check/batch"
      body: "*"
    };
  }
}

// CheckRequest represents a single authorization check
message CheckRequest {
  // The namespace of the object being checked
  string namespace = 1;

  // The ID of the object being checked
  string object_id = 2;

  // The relation/permission being checked
  string relation = 3;

  // The user ID to check permissions for
  string user_id = 4;

  // Optional consistency token for causally consistent reads
  string consistency_token = 5;

  // Optional context for conditional permissions
  map<string, string> context = 6;
}

// CheckResponse contains the result of an authorization check
message CheckResponse {
  // Whether the user has the requested permission
  bool allowed = 1;

  // Consistency token for subsequent operations
  string consistency_token = 2;

  // When this check was performed
  google.protobuf.Timestamp checked_at = 3;

  // Optional debug information (only included in debug mode)
  DebugInfo debug_info = 4;
}

// ExpandRequest asks for expansion of a userset
message ExpandRequest {
  // The namespace of the object
  string namespace = 1;

  // The object ID
  string object_id = 2;

  // The relation to expand
  string relation = 3;

  // Optional consistency token
  string consistency_token = 4;

  // Maximum depth to expand (prevents infinite recursion)
  int32 max_depth = 5;
}

// ExpandResponse contains the expanded userset
message ExpandResponse {
  // The expanded userset tree
  UserSet userset = 1;

  // Consistency token
  string consistency_token = 2;

  // When this expansion was performed
  google.protobuf.Timestamp expanded_at = 3;
}

// ListPermissionsRequest asks for all permissions of a user
message ListPermissionsRequest {
  // The user ID to list permissions for
  string user_id = 1;

  // Optional namespace filter
  string namespace = 2;

  // Optional object ID filter
  string object_id = 3;

  // Optional consistency token
  string consistency_token = 4;

  // Pagination token
  string page_token = 5;

  // Maximum number of permissions to return
  int32 page_size = 6;
}

// ListPermissionsResponse contains the user's permissions
message ListPermissionsResponse {
  // The permissions the user has
  repeated Permission permissions = 1;

  // Token for next page of results
  string next_page_token = 2;

  // Consistency token
  string consistency_token = 3;
}

// BatchCheckRequest allows checking multiple permissions at once
message BatchCheckRequest {
  // List of checks to perform
  repeated CheckRequest checks = 1;

  // Optional consistency token that applies to all checks
  string consistency_token = 2;
}

// BatchCheckResponse contains results for all checks
message BatchCheckResponse {
  // Results for each check in the same order as the request
  repeated CheckResponse results = 1;

  // Consistency token for subsequent operations
  string consistency_token = 2;
}

// DebugInfo provides additional information for debugging authorization decisions
message DebugInfo {
  // The resolution path taken to reach the decision
  repeated string resolution_path = 1;

  // Time taken to resolve the check
  int64 resolution_time_ms = 2;

  // Whether the result came from cache
  bool from_cache = 3;

  // Additional debug metadata
  map<string, string> metadata = 4;
}
